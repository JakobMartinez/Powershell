powershell is a part of windows and therefore can operate 
xfreerdp /u:student /v:10.50.31.214 /dynamic-resolution +glyph-cache +clipboard                    logs into windows vm

powershell comamands start with verb and end with a noun and allow for options vs windows commands can be one word like getproccess or tasklist


some commands in powershell have options that are required and some optional 
get file.txt
set 
remove 

get-command shows all commands 
get-verb gets all verbs possible
get-command -verb get  shows all the commands stating with get                  get-service  -get-command get-verb
get-command -Noun service gets commands where the noun part is service          set-service get-service start-service
                                                                                          
Get-EventLog -LogName Security                   shows all event logs as security


get-scheduledtask                     

user f8 to run a certain line 
f5 to run whole script 

man page in powershell is Get-Help and then command so
Get-Help Get-Process 
Get-Help Get-Process -Full             gives you more 

in examples of options system.string means you put a strong there and if it says system.int wants you to put in interger


update-Help -Force -ErrorAction SilentlyContinue                  updates help commands force error action to continue silently



Get-Help *log*
ge-help get-eventlog -showwindows             shows it in a window
Get-Help -Examples get-process              gives examples of get-process
get-help get-process -online         shows examples online of get-process




in get-help page of command the options i [] are optional also dont need some options as powershell is poistional and will automatically do it
only for certain commands

if it has -option <string> not optional must put 
will also tell you in error message missing required parameter

if [ <> ] optional but if you use that option some things may be required

Get-ChildItem -filter *.exe -path C:\Windows -recurse -name    gets all exe files in direcotry in c:\windows recursively by name



$ALias:dir                gets alias of dir which is get-childitem
$Alias:ls                 get-childitem as they do same
Get-Alias -Definition get-childitem         prints all the alias of get-childitem
set-Alias name settingfor
set-Alias edit notepad.exe          so when typ edit its really doing notepad.exe
remove-item alias:edit

get-host                                  gets verison and info

(get-process).processName       gets proccess names use () bc have to use . for proccessName
(get-process notepad).kill()
get-process | get-member        shows all the methods of get-process likse the one above


get-service | Format-Table Name, Status       formats all the get serivice by property name and shows its status

function fruit-host{ 
  write-Host "Apple"
  write-host "orange"
  write-host "banna"                                                    prints it order you put it does not let you store as variabel 
  write-host "pear"                                                   cna color and console only 
  }
  apple 
  orange 
  banna 
  pear 



function fruit-output{ 
  write-output "Apple"
  write-output "orange"                                       sorts it allows you to store as variable 
  write-output "banna"                                        bettwer for script
  write-output "pear"
  }
apple
banna
orange 
pear


VARIABLES
get-variable     shows preset variables 
$HOME calls home variable which is c:\users\student

$a = 10     to set variable dollar sign comes first       
                                                          name   value
get-variable a                gets the info on it          a     10

$a, $b, $c = 5, 6, 4
test-path variable:a
true 
tesst-path variable:b
false

remove-variable a               removes variable. dont need $ bc that would be calling the vlaue of variable for deletion
or
del variable:a


$var = "George"
write-host "hello $var"                   "" prints with variable value 
hello George

write-host 'hello $var'                 '' prints literal
hello $var



  FIND COMMANDS

   1 Ensure that you have the latest copy of help by updating your help system.         update-help -Force

   2 Which cmdlets deal with the viewing/manipulating of processes?                     get-process start-process stop-process wait-process

   3 Display a list of services installed on your local computer.                       get-service

   4 What cmdlets are used to write or output objects or text to the screen?            write-host"more words" write-output"words"

   5 What cmdlets can be used to create, modify, list, and delete variables?           (create $variable = value) (modify just asign it new value) (list get-varibale) (delete del variable:a) new-variable -name dog -value shepard
                                                                                       set-varibale -name dog -value shepard
   6 What cmdlet can be used, other than Get-Help, to find and list other cmdlets?     get-command

   7 Find the cmdlet that is used to prompt the user for input.                        read-host



RUNNING COMMANDS


   1 Display a list of running processes.     get-process 

   2 Display a list of all running processes that start with the letter "s".       get-process -name "s*"     or tasklist 

   3 Find the cmdlet and its purpose for the following aliases:     can do        get-alias gal, dir, echo          

        gal                                                                         get-alias gets aliases of commands 

        dir       get-childitem                                                     gets items and childitems in one or more location

        echo      write-output                                                        writes specidied objects to pipeline

        ?         where-object                                                      selects specific object based on proporties

        %         foreach-object                                                      performs operation for each item in a collection/list
  
        ft        format-table                                                        formats output as a table

   4 Display a list of Windows Firewall Rules.                                           GET-Netfirewallrule

   5 Create a new alias called "gh" for the cmdlet "Get-Help"                           set-alias gh Get-Help


VARIABLES 



    1 Create a variable called "var1" that holds a random number between 25-50.                   $var1 = ($Get-Random -Minimum 25 -Maximum 50) Invoke-Expression $var1 (will make value $var1 random every time with invoke expression)

    2 Create a variable called "var2" that holds a random number between 1-10.                    $var2 = (Get-Random -Minimum 1 -maximum 10) Invoke-Expression $var2

    3 Create a variable called "sum" that holds the sum of var1 and var2.                         $sum = ($var1 + $var2)

    4 Create a variable called "sub" that holds the difference of var1 and var2.                  $sub =($var1 - $var2)

    5 Create a variable called "prod" that holds the product of var1 and var2.                    $prod= ($var1 * $var2)
    
    6 Create a variable called "quo" that holds the quotient of var1 and var2.                    $quo = ($var1 / $var2)

    7 Replace the variables in text with their values in the following format:                     

        "var1" + "var2" = "sum"                                                                 "$var1 + $var2 = $sum"

    8 Replace the variables in text with their values in the following format:

        "var1" - "var2" = "sub"                                             "$var1 - $var2 = $sub"

    9 Replace the variables in text with their values in the following format:

        "var1" * "var2" = "prod"                                          "var1 * $var2 = $prod"

    10 Replace the variables in text with their values in the following format:

        "var1" / "var2" = "quo"                                           "$var1 / $var2 = $quo"



THE PIPELINE (when question says display usually meand for these atleast format-table)


    1 Display the start time of the earliest and latest running processes                                                             
                                                                                                get-process | sort starttime | select -skip 1 -First 2 -last 1 | format-table processname, starttime

    2 Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
                                                                                                                                                    get-date | format-table dayofweek 
                                                                                                                                                    (get-date).DayofWeek

    3 Identify a cmdlet that displays a list of installed hotfixes.
                                                                                                                                        get-Hotfix

    4 Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
                                                                                                                                    get-hotfix | sort-object -property Installedon | Format-Table Installedon, hotfixd
                                                                                                                                    
    5 Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.

                                                                                                                  get-hotfix | sort-object -property description | Format-table Installedon, hotfix, description

