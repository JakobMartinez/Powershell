ARRAY                               list that goes off index value
(get-process).Gettype()            shows you type of something   this shows its a list of processes
$prod = get-process
$prod[4]                      will show line 4 of get-process
$prod[-1]                   will show last line
$proc -is [array]    woudl print true bc is array if not would set false
$proc.count     shows length/count in array how many in there

$array = 1,4,5,6,8
$array -is [array]          returns true
$array[0] -is [int]         return true
$array = 1..25
($array[3]).Gettype()       gets type of index 3 of list $array
$arrray[3]                  prints whats at that position


1. Create an array containing a range with a random starting and stopping point. The starting point will be a random number from -10 through 0. The ending point will be a random number from 1 through 20.
$startpoint = (Get-Random -Minimum -10 -Maximum 0 )
$endpoint = (Get-Random -Minimum 1 -Maximum 20) 
$array = ($startpoint) .. $endpoint



2. Create a variable that contains the contents of the array in reverse
 





JAGED ARAYS( nested array)      
$jagarray = "joe", "jim", "jan", (1('apple', 'pear'),3), "jay"
$jagarary[0]    joe
$jagarary[3]    1 
                 apple 
                 pear
                 3

$jagarray[3][1]    apple
                   pear

$jagarray[3][1][1]   pear


$a= 1,2,3
$a  += @(4,5,6)
$a     1 2 3 4 5 6 

$a += , @(7,8,9)
$a      1 2 3 4 5 6 7 8 9
$a[-1]   7 8 9          bc of the comma in front of it


@(0) * 20  will print out 0 20 times in a list

$TARGETARRAY =  @(
      (35.7219, 51.3345, "Tehran"),
      (39.99042, 116.4074, "Beijing"),
      (39.158, 125.9198, "Pyongyang")                                 last one does not need coma
)     
   


foreach ($line in $targetarray) {
  if ($line[-1] -eq 'Beijing'){
      write-output $line
 }
}





SCRIPTS



$myblock = { Get-Service | Format-Table name, status}                         
& $myblock                                                                  & to run script   must call script block with &



$a = 1 
$c = { 1+1 }

$a += &$c
                        $a = 3                                                if you run $a+= &$c again it will be 5 then 7 then 9
                        
                        
                        
                        
Get-ChildItem | Sort-Object                           sort alphabetically  
gci | sort-object -Descending                         sort decscedning alphabeticallyt
gci | Sort-Object -property Length -Descending        sort by length descending 
gci | sort Length -Descending                         short hand version of ^


        
                      


Get-Service | Group-Object status                               gets all services and groups it based off of status 
Get-ChildItem | Group-Object {$_.Length -lt 1kb}                gets all dirs/files length of -lt 1kb and groups them 

$_.                       pipeline varibale whatever is in next statement means before the pipeline


1, 8, 5 ,3 | sort-object
1 3 5 8
'35','8','1', '5' | sort-object
1
35
5
8


1..10 | sort-object -property {get-random} 




SELECT OBJECT           selcts object wants
get-proccess | select-object -First 10                        gets first 10 processes

get-process | select-object name, id          similar to get-process | format-table name, id


get-process | get-member                  gives description of process  shows the objects name type and definition 

get-process | select-object naem, id, description    so dont habe to do get memebr will give you description





WHERE OBJECT filtering and outputing results


get-service | where-object {$_.status -eq 'running'}
get-childitem *.txt | where-object {$_.length -lt 100}
get-process | where {$_.name -like "*powershell*"} | format-table name, Description                                     learn dif between like and match adn when use regex or wildcards
                                                                                                                                                                                                                                                
get-process | where {$_.name -eq "*powershell*"} | format-table name, Description       wont work bc -eq has to be exactly same 



1,2,3,1,2,3,1,2,3,1,2,3 | sort-object | get-unique                                  must sort first only looks one above and below
1 2 3


gci | measure-object -property length                     size 
(gci).count                                                 how many in there 
gci | measure-object -property length -average -maximum -minimum -sum        



COMPARE 
"i bet you all cant wait to graduate" > text.txt
$before = Get-childitem
'4' > test.txt
$after = gci
compare-object $before $after -property length, name                  compares what has changed in a file 




CREATIGN AN OBJECT and add info 
$MyTruck = new-object object 
#ADD PROPERTY TO AN OBJECT
add-member -membertype noteproperty -name color -value black -inputobject $Mytruckcreate noteproperty called color give it value black for $mytrcck
#now can do 
$mytruck.color
black
or 
$mytruck | get-member           shows the objects name type and definition 





Create a custom object that contains information about the host system using the following:

    Win32_ComputerSystem

    Win32_BIOS

    Win32_OperatingSystem

    Win32_LogicalDisk
    se the cmdlet Get-WmiObject to obtain the needed information
    
    
    
    
    
$compinfo = Get-WmiObject win32_computersystem
$osinfo = Get-WmiObject win32_operatingsystem
$biosinfo = Get-WmiObject win32_BIOS
$diskinfo = Get-WmiObject win32_LogicalDisk

$myobject= New-Object psobject 

$myobject | Add-Member -MemberType NoteProperty -Name Computername -Value $compinfo.Name
$myobject | Add-Member -MemberType NoteProperty -Name OperatingSystem -Value $osinfo.Caption
$myobject | Add-Member -MemberType NoteProperty -Name Version -Value $osinfo.version
$myobject | Add-Member -MemberType NoteProperty -Name Manufacturer -Value $biosinfo.Manufacturer
$myobject | Add-Member -MemberType NoteProperty -Name Disks -Value $diskinfo._path
    
    
    
    
    

ps providers let you do stuff cant do with interface

make a ps drive
New-PSDrive -name HKU -psprovider registry -root HKEY_USERS

New-PSDrive -name Z -PSProvider FileSystem -Root \\live.sysinternals.com\tools
start-service -name WebClient


add-member -me Noteproperty -in $mytruck -na Make -va Ford              short hand veriosn of ^ but adds differntt value  
$mytruck | get memebr         shows the objects name type and definition 
$Mytruck | add-member noteproperty -name model -value F150


ADD METHOD TO AN OBJECT 
add-member -membertype Scriptmethod -Inputobject $mytruck -name Drive -value { "going on a road trip" }
$MYtruck | add-member scriptedmethod -name park -value { "fidning a spot" }

$mytruck.park()
findign a spot

#PSCustomObject
$Soldier = [PSCustomObject]@{
  "Firstname" = "joe"
  "Lastname" = "snuffy"
  "MilitaryRAnk" = "ssg"
  "MOS" = "17c"
  "position" = "host "aalyst"
$soldier



-eq -lt -gt (match regex use match )(match not regex use not match) (like or not like for *) -ge -le



2 -eq 2 true 
2 -eq 3 false
1,2,3 -eq 2     2
"abc" -eq "abc" true
"abc" -eq "abc", "def"  false
"abc", "def" = "abc"   abc
  
  
  
  
  "powershell" -like "*shell"
  true
  
"Powershell", "server" -like "*shell"
powersjhell

$fruit = 'apple', 'orange', 'pear', 'tomato'
$fruit -contains 'tomato'
true


"pinky" -notlike "[A-F]inky"
True





#combo  comapre
$num = 5
(($num -gt 1) -and ($num -lt 10))
true
(($num -gt 1) -or ($num -lt 


#IF stateements
$x=11
if($x -gt 10) {"$x is larger than 10"}

11 is larger than 10


$x=8
if($x -le 9){
  write-host "$x is not equal to 9" -ForegroundColor Gray
  }
  
  
  #IF else
  if("ABC" -eq "ABC"){
      write-host "Example 1 - condition satisfied" -ForegroundColor Green
   }
  else { 
      write-host "Example 1 - condition not satisfied" -ForegroundCOlor Red
   }
   
   
   
   #switch 
   $fruit = "C"
   switch($fruit) { 
    a{"apple"}
    b{"banna"}
    c["cranvberry"}
    }
    cranberry
      
      




#for each loop
$nums  = 1, 2, 3, 4, 5
$nums | foreach-object {$_ *2}





$list = 'a', 'b', 'c'                     
$list | foreach {$_.ToUpper()}
A B C 


Get-Childitem | Foreach-Object {$_.length / 1kb}


if dont want to use pipeline just put for each

Foreach ($item in gci c:\ -recurse){$item.name}

foreach($number in 1..5){$number * 2}

#foreach array
$teams = "Tiger", "Pistons" , "Red Wings", "Lions:"
foreach ($team in $teams) {"Detroit $team"}




#WHILE LOOPS
$num  = 0
while($num -lt 3) { 
    $num
    $num++
 }
 
 
 
 $num = 0 
 do {
 $num 
 $num++
} while($num -lt 3)



#do until
$num = 0
do{
  $num
  $num++
}until($num -gt 3)



#FOR LOOPS
for($num -eq 1; $num -le 3; num ++){$num}

for($i=0; $i -le 255; $i++){
  write-host 192.168.0.$i
}



#read and write to a file 
set-content -path .\example.txt -value "A String"
"a new string" > .\example.txt

"another string' >> .\example.txt
Add-content -path .\example.txt -value "another one"
Add-content -path .\example.txt "another one"


get-content .\example or cat .\example.txt





'"Odoyle Rules"' > Odoyle-script.ps1
.\odoyle-script.ps1




@'                                                                                not on test 
"Odoyle Rules!'
"more code"
get-service
get-childitem
'@  > Anotherdoyle-script.ps1
.\Anotehrdoyle-script.ps1





#hashtables
$mylist  = @{first = "JOhn"; Last = "doe "; Mid = "Bon"; age = 35}
$mylist
$mylist.Last
$mylist["Last"]
$mylist.keys
$mykeys.values


$lsit = @{element1= 5; array1= 1..5; array2 = 6,7,8}

